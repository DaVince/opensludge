#include "allfiles.h"// C RunTime Header Files#include <stdlib.h>#include <malloc.h>#include <unistd.h>#include <string.h>#include <time.h>#include "debug.h"#include "sound.h"#include "direct.h"#include "winstuff.h"#include "newfatal.h"#include "sprites.h"#include "sprbanks.h"#include "fonttext.h"#include "backdrop.h"#include "sludger.h"#include "objtypes.h"#include "region.h"#include "people.h"#include "statusba.h"#include "talk.h"#include "stringy.h"#include "specialSettings.h"#include "floor.h"#include "colours.h"#include "moreio.h"#include "transition.h"#include "vid.h"#include "timing.h"#include "winversion.h"#include "language.h"int dialogValue = 0;HINSTANCE helloInstance;iniStuff iniFileSettings;extern int specialSettings;extern BOOL runningFullScreen;extern BOOL videoPlaying;extern unsigned long startOfDataIndex;extern HICON customIcon;LRESULT CALLBACK HungryInfoFunc(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam) {	#pragma unused (lParam)	static int timeLeft;	switch (message) {        case WM_INITDIALOG:		SetClassLong (hDlg, GCL_HICON, (LONG) LoadIcon (helloInstance, MAKEINTRESOURCE (105)));		ShowWindow (hDlg, SW_SHOW);		timeLeft = (startOfDataIndex >> 16) + 2;		if (! SetTimer (hDlg, 1, 1000, NULL)) fatal ("Couldn't set up clock!");		// No break here!		case WM_TIMER:		if (! -- timeLeft) {			KillTimer (hDlg, 1);			SetDlgItemText (hDlg, IDOK, "Start the game!");			EnableWindow (GetDlgItem (hDlg, IDOK), TRUE);		} else {			SetDlgItemInt (hDlg, IDOK, timeLeft, FALSE);		}		return TRUE;		case WM_COMMAND:		switch (LOWORD(wParam)) {			case IDCANCEL:			case IDOK:			EndDialog (hDlg, TRUE);			dialogValue = 1 << (LOWORD(wParam) == IDCANCEL);			return (TRUE);							case 3456:			if ((unsigned long) ShellExecute (hDlg, "open", "http://www.hungrysoftware.com/", NULL, NULL, SW_SHOWNORMAL) <= 31) {				warning ("Can't open browser window!");			}								return (TRUE);		}		break;	}    return FALSE;}char * grabFileName (HINSTANCE hInstance) {	OPENFILENAME ofn;	char path[MAX_PATH];	char file[MAX_PATH]="";	memset (& ofn, 0, sizeof (ofn));	ofn.lStructSize = sizeof (ofn);	ofn.hwndOwner = NULL;	ofn.hInstance = hInstance;	ofn.nMaxFile = MAX_PATH;	ofn.lpstrInitialDir = path;	ofn.Flags = OFN_HIDEREADONLY | OFN_EXPLORER;	ofn.lpstrFilter = "SLUDGE games (*.SLG)\0*.slg\0\0";	ofn.lpstrFile = file;		if (GetOpenFileName (& ofn)) {		return copyString (file);	} else {		return NULL;	}}void fixDir (char * f) {	int got = -1, a;		for (a = 0; f[a]; a ++) {		if (f[a] == '\\' || f[a] == '/') got = a;	}		if (got != -1) {		f[got] = NULL;		chdir (f);		f[got] = '\\';	}}void tick ();int APIENTRY WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance,							LPSTR lpCmdLine, int nCmdShow) {	#pragma unused (hPrevInstance, nCmdShow)	helloInstance = hInstance;	MSG msg;	time_t t;	srand((unsigned) time(&t));		char * sludgeFile;		if (lpCmdLine && lpCmdLine[0]) {		sludgeFile = lpCmdLine;	} else {		char exeFolder[MAX_PATH+1];		if (GetModuleFileName (NULL, exeFolder, MAX_PATH) == NULL)			exeFolder[0] = NULL;			//		warning (exeFolder);		int lastSlash = -1;		for (int i = 0; exeFolder[i]; i ++) {			if (exeFolder[i] == '\\') lastSlash = i;		}		exeFolder[lastSlash+1] = NULL;//		warning (exeFolder);		sludgeFile = joinStrings (exeFolder, "gamedata");//		warning (sludgeFile);		FILE * tester = fopen (sludgeFile, "rb");		if (tester) fclose (tester);		else sludgeFile = grabFileName (hInstance);	}			if (! sludgeFile) return 0;		fixDir (sludgeFile);		// OK, so we DO want to start up, then...	initialiseMovieStuff ();	if (! winVersionInit ()) return 0;	if (! initSludge (sludgeFile, iniFileSettings)) return 0;	if (! InitApplication (hInstance)) return FALSE;	if (! resizeBackdrop (winWidth, winHeight)) return fatal ("Couldn't allocate memory for backdrop");	blankScreen (0, 0, winWidth, winHeight);	// Been meaning to add that for... well, ever	if (! initPeople ()) return fatal ("Couldn't initialise people stuff");	if (! initFloor ()) return fatal ("Couldn't initialise floor stuff");	if (! initObjectTypes ()) return fatal ("Couldn't initialise object type stuff");	initSpeech ();	initStatusBar ();	resetRandW ();	//	char aaa[10];//	sprintf (aaa, "%i", specialSettings);//	warning (aaa);	if (! (specialSettings & SPECIAL_REGISTERED)) {		DialogBox(hInstance, MAKEINTRESOURCE (100), NULL, (DLGPROC) HungryInfoFunc);		while (! dialogValue) {;}		if (dialogValue == 2) return 0;	}	if ((specialSettings & SPECIAL_FULLSCREEN) && iniFileSettings.userFullScreen) {		specialSettings &= ~SPECIAL_INVISIBLE;		initResChange (iniFileSettings.refreshRate);		runningFullScreen = fullScreenMe ();//		if (! runningFullScreen) warning ("Couldn't switch to required resolution in 16-bit or 24-bit colour. The game will be run in a window instead.");	}	// Finally, start the application...	if (! InitInstance (hInstance, getNumberedString(1))) {		displayFatal ();		return 0;	}	//	debugOut ("MAIN: Just before init timer!");	Init_Timer();//	debugOut ("MAIN: Just before loop!");	for (;;) {//		tick ();//		Wait_Frame ();				if (PeekMessage (& msg, NULL, 0, 0, PM_NOREMOVE)) {			if (GetMessage (& msg, NULL, 0, 0) <= 0) break;			TranslateMessage (& msg);			DispatchMessage (& msg);		} else {							// If no messages do game stuff			tick ();						Wait_Frame();		}	}		if (videoPlaying) finishVideo ();	if (runningFullScreen) oldScreenSize ();	killSoundStuff ();	if (customIcon) DestroyIcon (customIcon);	displayFatal ();	// Ooooooh! They think it's all over... it is now.	return (msg.wParam);}